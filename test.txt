jdk 설치
java Development Kit
thmurin jdk 17 설치: Open jdk
git = 버전관리 프로그램 : 로컬관리
github = 저장공간(git으로 관리되는 소스 저장)
자바소스 == github 공간

  기본
   byte : 1byte 저장공간 / short :2byte / int : 4byte / long : 8byte
   bit : 0 or 1
   byte : 8bit ex)00000000 / 00000001 .....
   유니코드 : 전세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 표준
   a= 97 / A =65
   가 = 44032
   -실수형(float, double) : 소수점, 지수형태
   float : 4byte / double(기본타입) : 8byte
   -문자형(char) : 홑따옴표 사용
   char : 2byte
   char ch1 = 'a';
   -논리형(boolean) : true, false 값 표현 / 1byte

1. 로컬저장소 초기화
git init
2. gitigonre
gitignore = 버전관리할 때 무시할 파일 기록

3. 작성되 소스 버전관리 
(1) 로컬 저장소에 관리할 파일 추가= git add 관리할파일명
(2) 추가된 파일을 저장하고 확인하기 : git commit -m"메세지"

4.원격(remote)포지토리(github)

1 원격리포지토리 추가 : git remote add origin github주소
2 원격리포지토리 파일 추가 : git push origin(원격) main(로컬)

개발도구
-에디터(IDE) : 자바
1 visual studio code : 인텔리j 와 유사 프리 다양한 extention을 통해서 다른 개발 시에도 많이 사용
2 이클립스 : 프리 버전(주로 자바 개발시 사용)
3 인텔리j : free 버전은 기능 제한됨 사용료 지불해야 전체 기능 사용 가능

java
 - 웹개발 필수 언어
 - 대소문자 구분함
   클래스명은 대문자로 시작 
   메소드명은 소문자로 시작
  - 자바는 클래스가 기본


1. 변수: 메모리 내 저장공간
  - 저장공간마다 담을 수 있는 값이 달라짐
  - 타입 변수명 = 값;
  - 타입 : int, float, doubel, char, boolean, byte, short, long
  - 변수명 : 영어, 한글명 가능하나 영어를 사용함
           양어소문자 사용(flag, curPos)혼합하여 사용할경우 두번째단어는 대문자로 시작
  - int num = 10;
  - 타입 : 정수형(int, long), 문자형(char), 실수형(float, double), 논리형(boolean)
  - 정수형(int, long, byte, short)

  2. 상수 :메모리 내 정잔공간 + 한 번 저장하면 다른 값을 변경 불가
  - final 타입 상수명(대문자) = 값;
  
  3. 형변환 (캐스팅,casting)
   -변수 또는 상수의 타입을 다른 타입으로 변환
   -강제 형변화 :(변환할타입) 변수명

  4. 연산자
    - 연산자 : 연산을 수행하는 기호
    - 피연산자 변수, 상수...
    - 연산자 종류 
     (1) 산술연산자 : +-*/%<<>>
     (2) 비교연산자 : > < >= <= !=
     (3) 논리연산자 : && || !
     (4) 대입연산자 : =
     (5) 삼항연산자 : 조건 ? 참일때 : 거짓일때
     (6) 단항연산자 : ++ --

제어문 : 조건문, 반복문

5. 조건문 : 조건에 따라서 수행 여부 결정
 - if / swich 
 if(조건식){수행할 문장}

6. 반복문 : 어떤 작업이 반복적으로 수행되도록 할 때 사용
 - 종류: for, while, do~while

 for (int i = 1; i <= 10; i++) {
     sum += i;}
1) int i =1; 실행
2) i <= 10; 조건식 검사 => true
3) for 구문 안으로 진입 후 구문 실행 
4) i++ 실행
5) 조건식 검사 => 2) ~ 4) 실행

1) 바깥쪽 for int i =0;
2) 바깥쪽 for i < 5:
3) 안쪽 for int j = 0;
4) 안쪽 for j < 10;
5) System.out.print("*")
6) 안쪽 for j++
7) 안쪽 for j < 10;
8) System.out.print("*")